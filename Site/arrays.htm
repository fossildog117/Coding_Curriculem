<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="http://cdn.opalrb.org/opal/current/opal.js"></script>
    <script src="http://cdn.opalrb.org/opal/current/opal-parser.js"></script>
    <script type="text/javascript">Opal.load('opal-parser')</script>

    <!-- Bootstrap -->
    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <style type="text/css">
        body {
            padding: 20px 50px; }

        .examplecode {
            margin: 20px 20px;
            background-color: #262626;
            color: #ffffff;
            padding: 10px 10px; }

        .codebutton {
            display:inline;
            margin: 0 0 0 auto; }

        .graphic {
            text-align: center; }

        .indent1 {
            text-indent: 2em; }
    </style>

    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->

  <title>Lesson- Arrays</title>
</head>

<body>

  <h1>Lesson- Arrays</h1>
  <h2>Arrays</h2>
  
  <p>In ruby, an array is a form of a datatype that can be used to store a collection of different types of values as a sequence under a single named variable. (Other datatypes include strings, numbers, and booleans). Elements are assigned to an array using the format below. You first state the variable name for the array, then the assignment operator (=), followed by elements of the array between squared brackets. The elements are separated by commas.</p>
  <p>array_name=[item1 , item2]</p>
  <p>It also possible to have an empty array:<p>
  <p>Empty_array =[ ]</p>
  
  <h4>Index</h4>
  <p>Indexes can be used to access elements from the array individually. We first state the array name then in between the square brackets you write the index number like below. Array indexes begin with 0 and not at 1.</p>
  <pre>array_name[Index]
array_name[0]                              #Access 1st element in the array -index 0</pre>

<p>The example below can be used to add the 3rd (index 2) and 4th (index 3) numbers of the num array. It outputs 25 (10+15).</p>
<h5>Example</h5>
<pre>.num = [1, 5, 10, 15]
puts "Adding the numbers at indices 2 and 3"
puts "#{num[2] + num[3]}"</pre>

<h4>Assignment in Arrays</h4>
<p>Not only can you access values from an array but you can also assign values. We can assign a value to the 3rd number from the num array above. Below we changed the value from 10 to 34.</p>
<pre>num[2]=34                    #If we execute num[2]+num[3] again we now get 49.</pre>

<h4>Adding Elements to an Array</h4>
<p>An array can be of any length which allows us to add to add items to the end of the array. In the example below, we created an array called space. We then added the string "NASA" to the end of the array. To see the effect, we printed out the length of the array and also printed out the array. The new array outputs is ["rocket", "shuttle", "astronaut, "NASA"].</p>
<h5>Example</h5>
<pre>space=["rocket", "shuttle", "astronaut"]
space.push("NASA")                                   #adds string NASA to the end of the array
puts "#{space.length}"                               #prints new length of the string(4 in this case)
puts space.inspect</pre>

<p>The above code uses the .inspect method to print the space array. It converts the array into a string and prints in the form an array.</p>
<p>We can also insert elements into an array by using a different method as shown below. In this method, we can decide on the position in the array (index) where we want to add a new element. It will move all the elements from that index onwards down by 1.</p>
<pre>array_name.insert(index, item_to_be_added)</pre>
<h5>Example</h5>
<pre>space=["rocket", "shuttle", "astronaut"]
space.insert(1, "NASA")                         #array_name.insert(index, item_to_be_added)
puts space.inspect</pre>
<p>The code above outputs ["rocket", "NASA", "shuttle", "astronaut"].</p>
<h4>Removing Elements from an Array</h4>
<p>It is possible to remove elements from an array. An example is shown below. We use the '.delete(element)' method to remove an element and it doesn't return anything. </p>
<h5>Example</h5>
<pre>space=['rocket', 'shuttle', 'astronaut','shuttle']
space.delete('shuttle')                                 #deletes all the elements that are 'shuttle'
puts space.inspect</pre>
<p>The code above outputs: ['rocket', 'astronaut']</p>

<h4>Slicing Arrays</h4>
<p>It is possible to access only a specific part of an array as shown in the example below. We can take a subsection of the array and store it in the slice array. We start at the index which is stated before the '..' in the square brackets and it takes the number of values defined after '..'. The example below prints ["shuttle", "astronaut"]</p>
                               
<h5>Example</h4>
<pre>space =["rocket", "shuttle", "astronaut", "NASA"]
slice = space[1..2]                                  #includes "shuttle" and up to and not including "NASA"
puts slice.inspect</pre>
<h4>Searching through Arrays</h4>
<h5>Example</h5>
<pre>astronauts=["Armstrong", "Gagarin", "Aldrin"]                  #Array created
puts "#{astronauts.index("Gagarin")}"                          #Prints the first index of "Gagarin"</pre>
<p>We state the name of the array and use the .index method. In the parenthesis following the .index, we state the element that we are searching for. Output for the above code is '1' because the first occurrence of the string "Gagarin" in the array is at index 1.</p>

<h4>For Loops and Arrays</h4>
<p>We can use a for loop if we want to apply the same sequence of statements on every element in an array. The structure used is shown below:</p>
<pre>variable_name=value                                         #initialise variable
for variable_name in array_name                             #add a colon following array name
    Statement(s) 
end                                                         #Remember to include 'end'</pre>

<p>A variable name follows the 'for' keyword. The variable will be assigned the value of each element in the array in turn. The statements that are part of the for loop will be executed for each element in the array. Below is an example that adds 10 to every element in the array. It will output values from 11 to 16 each on a new line.</p>
<h5>Example</h5>
<pre>numbers=[1,2,3,4,5,6]
for x in numbers
    puts "#{[x+10]}"
end</pre>

<h4>Each</h4>
<p>Another useful iterator is the .each method. It can be used to apply an expression for each element of an object, one at a time. The general syntax that is used for the each.method is shown below:</p>

<pre>object.each { |element| Statement(s)}</pre>

<p>We can replace the curvy brackets with the 'do' keyword. The syntax for this is shown below:</p>

<pre>Object.each do|element|
Statement(s)</pre>

<p>In between | |, you state a variable name. It acts as a place that holds each element of the object (carried out by the .each method). Below is an example. It add 10 every element in the array and then prints each of those elements. It outputs 11, 12, 13, 14 and 15.</p>
<h5>Example</h5>
<pre>space = [1,2,3,4,5]
space.each do |x|                                          #do keyword
  x += 10                                                  #add 10 to element
  puts "#{x}"                                              #print element
end                                                        #end keyword</pre>

<p>Alternatively we can do the same as above by using curly brackets instead of using keywords do and end:</p>
<pre>space = [1,2,3,4,5]
space.each {|x|puts "#{x+=10}"}</pre>

<h4>Sorting Items in an Array</h4>
<p>We can use the sort method in order to rearrange items in an array. The example below sorts the array in alphabetical order. It outputs the items each on a new line in alphabetic order. We use the .sort method, the .each method and the .reverse method. The .sort method arranges the elements in reverse order hence you have to use the .reverse method to arrange it in the opposite way round.</p>

<h5>Example</h5>
<pre>astronauts=["Gagarin", "Armstrong", "Aldrin"]         
astronauts.sort.each { |astronaut|}                              
    puts "#{[astronauts.reverse]}"</pre>                               





                                       

  
  

    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="bootstrap/js/bootstrap.min.js"></script>
</body>
</html>
