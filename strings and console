<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="http://cdn.opalrb.org/opal/current/opal.js"></script>
    <script src="http://cdn.opalrb.org/opal/current/opal-parser.js"></script>
    <script type="text/javascript">Opal.load('opal-parser')</script>
    <title>Learn Ruby</title>

    <!-- Bootstrap -->
    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet">

    <style type="text/css">
        body {
            padding: 20px 50px; }
        .examplecode {
            margin: 20px 20px;
            background-color: #262626;
            color: #ffffff;
            padding: 10px 10px; }
        .codebutton {
            display:inline;
            margin: 0 0 0 auto; }
        .graphic {
            text-align: center; }
    </style>
<html>
<head>
<title>Unit 2:Strings and the Console</title>
</head>
<body>

<h1>Strings and Output</h1>
<p>Strings are a type of variable, like integers. A string is a series (or string) of characters. In Ruby they’re they’re kept within quotation marks.</p>
<p>For example: <b>a = “Spaceship”.</b> </p>
<p>In this case, you are declaring a string called a which has the content “Spaceship”. Note that if you create a string and it only contains numbers, you can perform calculations with it due to the fact that it is a string. </p>
<p>N.B: To convert another variable to a string, use the function ‘to_s’.</p>

<p>To print something to the screen, use the “puts” function. </p>
<p>For example: <b>puts“Spaceship”</b> would output on the Hello on the console.</p>
<p>In order to output a variable you can still use the <b>“puts”</b> function</p>
<p>Following on from an earlier function:</p>
<p><b>a = “Spaceship”</b> </p>
<p><b>puts a </b> </p>
<p>The output will simply be Spaceship</p>
<p>N.B: The “puts” function automatically produces a new line</p>

<h2>Reading what the user says</h2>
<p>Some programs need to be able to read and respond to something that the user says or generally receive and understand data.</p>
<p>In order to do this, you have to use the <b> “gets”</b> function </p> 
<p>To use the gets function you have to declare that a variable is the input.</p>
<p>For example: <b>a = gets.chomp</b></p>
<p>Here, whatever the user enters will be stored as a string called <b>a</b>. Note that it will be stored as a string unless you choose to convert it to something else such as an integer. In order to convert something to an integer, use the <b>“to_i”</b> function on it. </p>



</body>
</html>
